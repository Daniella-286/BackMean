const Intervention = require('../models/Intervention');
const RendezVous = require('../models/RendezVous');
const DemandeDevis = require('../models/DemandeDevis');
const Mecanicien = require("../models/Mecanicien");
const DemandeDevisDetail = require('../models/DemandeDevisDetail');
const Piece = require('../models/Piece');
const PieceUtilise = require('../models/PieceUtilise');
const DevisPiece = require('../models/DevisPiece');
const moment = require('moment'); 

const fetchHistoriqueIntervention = async (id_vehicule, page = 1, limit = 10) => {
    try {
        // D√©finir les limites de la journ√©e actuelle
        const debutJournee = new Date();
        debutJournee.setHours(0, 0, 0, 0); // 00:00:00
        const finJournee = new Date();
        finJournee.setHours(23, 59, 59, 999); // 23:59:59

        const skip = (page - 1) * limit;

        // Rechercher toutes les interventions termin√©es pour le v√©hicule
        const interventions = await Intervention.find({ id_vehicule, avancement: "Termin√©" }) // üîπ Ajout du filtre ici
            .populate({
                path: 'id_rdv',
                populate: {
                    path: 'id_demande',
                    model: 'DemandeDevis',
                    populate: { 
                        path: 'id_client', 
                        model: 'Client' 
                    }
                }
            })
            .populate({
                path: 'id_vehicule',
                populate: [
                    { path: 'id_marque', model: 'Marque' },
                    { path: 'id_modele', model: 'Modele' }
                ]
            })
            .skip(skip)
            .limit(limit)
            .exec();

        // R√©cup√©rer le nombre total d'interventions termin√©es pour le v√©hicule
        const total = await Intervention.countDocuments({ id_vehicule, avancement: "Termin√©" });

        if (!interventions || interventions.length === 0) {
            return { success: false, message: "Aucune intervention termin√©e pour ce v√©hicule", total, totalPages: 0, currentPage: page };
        }

        // R√©cup√©ration des sous-services pour chaque intervention termin√©e
        const historique = await Promise.all(interventions.map(async (intervention) => {
            let services = [];

            if (intervention.id_rdv?.id_demande) {
                const demandeDetails = await DemandeDevisDetail.find({ id_demande: intervention.id_rdv.id_demande._id })
                    .populate({ path: 'id_sous_service', select: 'nom_sous_service' });

                // Formatage pour ne renvoyer que { id, nom }
                services = demandeDetails.map(detail => ({
                    id: detail.id_sous_service._id,
                    nom: detail.id_sous_service.nom_sous_service
                }));
            }

            return {
                id_intervention: intervention._id,
                date_intervention: intervention.date_intervention,
                duree_reparation: intervention.duree_reparation,
                avancement: intervention.avancement,
                vehicule: {
                    immatriculation: intervention.id_vehicule?.immatriculation || "Non renseign√©",
                    marque: intervention.id_vehicule?.id_marque?.nom_marque || "Inconnu",
                    modele: intervention.id_vehicule?.id_modele?.nom_modele || "Inconnu"
                },
                client: {
                    nom: intervention.id_rdv?.id_demande?.id_client?.nom || "Non renseign√©",
                    prenom: intervention.id_rdv?.id_demande?.id_client?.prenom || "Non renseign√©",
                    contact: intervention.id_rdv?.id_demande?.id_client?.contact || "Non renseign√©"
                },
                services
            };
        }));

        return {
            success: true,
            historique,
            total,
            totalPages: Math.ceil(total / limit),
            currentPage: page,
            limit
        };

    } catch (error) {
        console.error("Erreur dans fetchHistoriqueIntervention:", error);
        throw error;
    }
};

const getMecaniciensDisponibles = async (date_intervention, duree_reparation, id_service) => {
    try {
        const dateDebut = new Date(date_intervention);
        const dateFin = new Date(dateDebut.getTime() + duree_reparation * 60 * 60 * 1000);

        // V√©rification que la date d'intervention et la dur√©e sont valides
        if (isNaN(dateDebut.getTime()) || duree_reparation <= 0) {
            return { success: false, message: "Date ou dur√©e invalide." };
        }

        //  R√©cup√©rer les m√©caniciens ayant la comp√©tence requise
        const allMecaniciens = await Mecanicien.find({ id_service: id_service });

        if (allMecaniciens.length === 0) {
            return { success: false, message: "Aucun m√©canicien ne poss√®de cette comp√©tence." };
        }

        // R√©cup√©rer les interventions qui chevauchent cette plage horaire pour les m√©caniciens concern√©s
        const busyInterventions = await Intervention.find({
            id_mecanicien: { $in: allMecaniciens.map(m => m._id) },
            $or: [
                { date_intervention: { $lt: dateFin }, date_fin_intervention: { $gt: dateDebut } }
            ]
        });

        // Extraire les ID des m√©caniciens occup√©s
        const busyMecaniciens = busyInterventions.map(intervention => intervention.id_mecanicien.toString());

        // Filtrer les m√©caniciens disponibles
        const availableMecaniciens = allMecaniciens.filter(mec => !busyMecaniciens.includes(mec._id.toString()));

        // V√©rifier si aucun m√©canicien n'est disponible
        if (availableMecaniciens.length === 0) {
            return { success: false, message: "Aucun m√©canicien disponible pour cet horaire avec cette comp√©tence." };
        }

        return { success: true, mecaniciens: availableMecaniciens };
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des m√©caniciens disponibles:", error);
        throw error;
    }
};

const planifierIntervention = async (id_rdv, id_mecanicien, duree_reparation) => {
    try {
        const rdv = await RendezVous.findById(id_rdv);
        if (!rdv) {
            throw new Error("Rendez-vous non trouv√©.");
        }
        if (rdv.statut !== 'Confirm√©') {
            throw new Error("Seuls les rendez-vous confirm√©s peuvent √™tre planifi√©s.");
        }

        // Trouver la demande de devis associ√©e pour r√©cup√©rer l'id_vehicule
        const demandeDevis = await DemandeDevis.findById(rdv.id_demande);
        if (!demandeDevis) {
            throw new Error("Demande de devis associ√©e non trouv√©e.");
        }

        // Calcul de la date et heure de fin d'intervention
        const date_intervention = new Date(rdv.date_rendez_vous);
        const date_fin_intervention = new Date(date_intervention);
        date_fin_intervention.setHours(date_intervention.getHours() + duree_reparation); 

        const intervention = new Intervention({
            id_rdv: id_rdv,
            id_vehicule: demandeDevis.id_vehicule,
            id_mecanicien: id_mecanicien,
            date_intervention: date_intervention,
            duree_reparation: duree_reparation,
            date_fin_intervention: date_fin_intervention, 
            avancement: "Planifi√©" 
        });

        await intervention.save();
        return { success: true, message: "Intervention planifi√©e avec succ√®s.", intervention };
    } catch (error) {
        return { success: false, message: error.message };
    }
};

const updateInterventionMecanicien = async (idIntervention, idNewMecanicien) => {
    try {
        // V√©rifier si l'intervention existe
        const intervention = await Intervention.findById(idIntervention);
        if (!intervention) {
            return { success: false, message: "Intervention non trouv√©e" };
        }

        // V√©rifier si le nouveau m√©canicien existe
        const newMecanicien = await Mecanicien.findById(idNewMecanicien);
        if (!newMecanicien) {
            return { success: false, message: "M√©canicien non trouv√©" };
        }

        // Mettre √† jour l'intervention avec le nouveau m√©canicien
        intervention.id_mecanicien = idNewMecanicien;
        await intervention.save();

        return { success: true, message: "Intervention mise √† jour avec succ√®s", intervention };

    } catch (error) {
        console.error("Erreur dans updateInterventionMecanicien:", error);
        return { success: false, message: "Erreur serveur : " + error.message };
    }
};

const getEmploiDuTemps = async (mecanicienId) => {
    try {
        // D√©terminer la p√©riode (aujourd'hui + 7 jours)
        const startDate = moment().startOf('day').toDate(); // D√©but de la journ√©e actuelle
        const endDate = moment().add(7, 'days').endOf('day').toDate(); // Fin de la journ√©e du 7√®me jour

        // R√©cup√©rer toutes les interventions assign√©es √† ce m√©canicien
        const interventions = await Intervention.find({
            id_mecanicien: mecanicienId,
            date_intervention: { $gte: startDate, $lte: endDate } // Filtrer entre aujourd'hui et 7 jours apr√®s
        }).sort({ date_intervention: 1 }); // Trier par date croissante

        return { success: true, data: interventions };
    } catch (error) {
        return { success: false, message: `Erreur : ${error.message}` };
    }
};

const getPlanningJour = async (idMecanicien, date) => {
    try {
        let startDate, endDate;

        if (!date) {
            const today = new Date();
            startDate = new Date(today);
            endDate = new Date(today);
            startDate.setUTCHours(0, 0, 0, 0);
            endDate.setUTCHours(23, 59, 59, 999);
        } else {
            startDate = new Date(date);
            endDate = new Date(date);
            startDate.setUTCHours(0, 0, 0, 0);
            endDate.setUTCHours(23, 59, 59, 999);
        }

        const interventions = await Intervention.find({
            id_mecanicien: idMecanicien,
            date_intervention: { $gte: startDate, $lt: endDate }
        })
        .populate({
            path: 'id_rdv',
            populate: {
                path: 'id_demande',
                model: 'DemandeDevis',
                populate: { 
                    path: 'id_client', 
                    model: 'Client' 
                }
            }
        })
        .populate({
            path: 'id_vehicule',
            populate: [
                { path: 'id_marque', model: 'Marque' },
                { path: 'id_modele', model: 'Modele' }
            ]
        })
        .sort({ heure_intervention: 1 }) // üîπ Tri par heure d'intervention croissante
        .exec();

        if (!interventions || interventions.length === 0) {
            return { success: false, message: "Aucune intervention pr√©vue pour cette date" };
        }

        // Construction de la r√©ponse sans les sous-services
        const result = interventions.map(intervention => ({
            id_intervention: intervention._id,
            date_intervention: intervention.date_intervention,
            duree_reparation: intervention.duree_reparation,
            avancement: intervention.avancement,
            vehicule: {
                immatriculation: intervention.id_vehicule?.immatriculation || "Non renseign√©",
                marque: intervention.id_vehicule?.id_marque?.nom_marque || "Inconnu",
                modele: intervention.id_vehicule?.id_modele?.nom_modele || "Inconnu"
            },
            client: {
                nom: intervention.id_rdv?.id_demande?.id_client?.nom || "Non renseign√©",
                prenom: intervention.id_rdv?.id_demande?.id_client?.prenom || "Non renseign√©",
                contact: intervention.id_rdv?.id_demande?.id_client?.contact || "Non renseign√©"
            }
        }));

        return { success: true, data: result };

    } catch (error) {
        console.error("Erreur dans getPlanningJour:", error);
        return { success: false, message: "Erreur serveur : " + error.message };
    }
};

const getTaskIntervention = async (idIntervention) => {
    try {
        // V√©rifier si l'intervention existe
        const intervention = await Intervention.findById(idIntervention)
            .populate({
                path: 'id_rdv',
                populate: {
                    path: 'id_demande',
                    model: 'DemandeDevis'
                }
            })
            .exec();

        if (!intervention) {
            return { success: false, message: "Intervention non trouv√©e" };
        }

        // V√©rifier si une demande de devis est associ√©e
        if (!intervention.id_rdv || !intervention.id_rdv.id_demande) {
            return { success: false, message: "Aucune demande associ√©e √† cette intervention" };
        }

        const demandeId = intervention.id_rdv.id_demande._id;

        // R√©cup√©rer les sous-services associ√©s
        const sousServices = await DemandeDevisDetail.find({ id_demande: demandeId })
            .populate({ path: 'id_sous_service', select: 'nom_sous_service description' })
            .exec();

        const servicesList = sousServices.map(detail => ({
            id: detail.id_sous_service._id,
            nom: detail.id_sous_service.nom_sous_service,
            description: detail.id_sous_service.description || "Pas de description disponible"
        }));

        // R√©cup√©rer les pi√®ces n√©cessaires pour l'intervention
        const devisPieces = await DevisPiece.find({ id_demande: demandeId })
            .populate({ path: 'id_piece', select: 'nom_piece' })
            .exec();

        const piecesList = devisPieces.map(devis => ({
            id: devis.id_piece._id,
            nom: devis.id_piece.nom_piece,
            quantite: devis.quantite
        }));

        return {
            success: true,
            intervention: {
                id: intervention._id,
                date_intervention: intervention.date_intervention,
                duree_reparation: intervention.duree_reparation,
                avancement: intervention.avancement
            },
            sous_services: servicesList,
            pieces: piecesList
        };

    } catch (error) {
        console.error("Erreur dans getTaskIntervention:", error);
        return { success: false, message: "Erreur serveur : " + error.message };
    }
};

const updateInterventionStatus = async (idIntervention, statut, mecanicienId) => {
    try {
        // V√©rifier si le statut est valide
        const validStatuses = ['D√©but', 'En cours', 'Termin√©'];
        if (!validStatuses.includes(statut)) {
            return { success: false, message: 'Statut invalide' };
        }

        // Trouver l'intervention par ID
        const intervention = await Intervention.findById(idIntervention);
        if (!intervention) {
            return { success: false, message: 'Intervention non trouv√©e' };
        }

        // V√©rifier que c'est bien le m√©canicien qui met √† jour le statut
        if (intervention.id_mecanicien.toString() !== mecanicienId) {
            return { success: false, message: 'Acc√®s non autoris√© : vous ne pouvez mettre √† jour que vos propres interventions' };
        }

        // S√©curiser les transitions de statut
        if (intervention.avancement === 'Termin√©' && (statut === 'En cours' || statut === 'D√©but')) {
            return { success: false, message: 'Impossible de revenir √† "En cours" ou √† "D√©but" apr√®s que l\'intervention soit termin√©e' };
        }

        if (intervention.avancement === 'En cours' && statut === 'D√©but') {
            return { success: false, message: 'Impossible de revenir √† "D√©but" apr√®s que l\'intervention ait commenc√©' };
        }

        // Mettre √† jour le statut
        intervention.avancement = statut;

        // Sauvegarder l'intervention mise √† jour
        await intervention.save();
        return { success: true, message: 'Statut mis √† jour avec succ√®s' };
    } catch (error) {
        return { success: false, message: `Erreur serveur : ${error.message}` };
    }
};

const addPieceToIntervention = async (idIntervention, idPiece, quantite) => {
    try {
        // V√©rifier si l'intervention existe
        const intervention = await Intervention.findById(idIntervention);
        if (!intervention) {
            return { success: false, message: 'Intervention non trouv√©e' };
        }

        // V√©rifier si la pi√®ce existe
        const piece = await Piece.findById(idPiece);
        if (!piece) {
            return { success: false, message: 'Pi√®ce non trouv√©e' };
        }

        // R√©cup√©rer le prix unitaire de la pi√®ce
        const prixUnitaire = piece.prix_unitaire;

        // Cr√©er une nouvelle instance de PieceUtilise avec le prix unitaire
        const newPieceUtilise = new PieceUtilise({
            id_intervention: idIntervention,
            id_piece: idPiece,
            prix_unitaire: prixUnitaire,
            quantite: quantite
        });

        // Sauvegarder la pi√®ce utilis√©e
        await newPieceUtilise.save();

        return { success: true, message: 'Pi√®ce ajout√©e √† l\'intervention avec succ√®s' };
    } catch (error) {
        return { success: false, message: `Erreur serveur : ${error.message}` };
    }
};

const getInterventionsTerminees = async (date, page = 1, limit = 10) => {
    try {
        let startDate, endDate;

        // Validation et traitement de la date
        if (!date) {
            const today = new Date();
            startDate = new Date(today.setUTCHours(0, 0, 0, 0)); // Date du jour √† 00:00
            endDate = new Date(today.setUTCHours(23, 59, 59, 999)); // Date du jour √† 23:59:59
        } else {
            startDate = new Date(date);
            endDate = new Date(date);
            startDate.setUTCHours(0, 0, 0, 0);
            endDate.setUTCHours(23, 59, 59, 999);
        }

        // Calculer le nombre d'√©l√©ments √† ignorer (skip) bas√© sur la page
        const skip = (page - 1) * limit;

        // R√©cup√©rer les interventions termin√©es pour cette date avec pagination
        const interventions = await Intervention.find({
            avancement: "Termin√©",
            date_intervention: { $gte: startDate, $lt: endDate }
        })
        .skip(skip)
        .limit(limit)
        .populate({
            path: 'id_rdv',
            populate: {
                path: 'id_demande',
                model: 'DemandeDevis',
                populate: { 
                    path: 'id_client', 
                    model: 'Client' 
                }
            }
        })
        .populate({
            path: 'id_vehicule',
            populate: [
                { path: 'id_marque', model: 'Marque' },
                { path: 'id_modele', model: 'Modele' }
            ]
        })
        .sort({ date_intervention: 1 }) 
        .exec();

        // Compter le nombre total d'interventions termin√©es pour cette date
        const totalInterventions = await Intervention.countDocuments({
            avancement: "Termin√©",
            date_intervention: { $gte: startDate, $lt: endDate }
        });

        // Si aucune intervention n'est trouv√©e
        if (!interventions || interventions.length === 0) {
            return { success: false, message: "Aucune intervention termin√©e pour cette date", page, limit };
        }

        // Construction de la r√©ponse
        const result = interventions.map(intervention => ({
            id_intervention: intervention._id,
            date_intervention: intervention.date_intervention,
            duree_reparation: intervention.duree_reparation,
            avancement: intervention.avancement,
            vehicule: {
                immatriculation: intervention.id_vehicule?.immatriculation || "Non renseign√©",
                marque: intervention.id_vehicule?.id_marque?.nom_marque || "Inconnu",
                modele: intervention.id_vehicule?.id_modele?.nom_modele || "Inconnu"
            },
            client: {
                nom: intervention.id_rdv?.id_demande?.id_client?.nom || "Non renseign√©",
                prenom: intervention.id_rdv?.id_demande?.id_client?.prenom || "Non renseign√©",
                contact: intervention.id_rdv?.id_demande?.id_client?.contact || "Non renseign√©"
            }
        }));

        // Retourner les interventions avec les informations de pagination
        return {
            success: true,
            data: result,
            total: totalInterventions,
            page,
            limit,
            totalPages: Math.ceil(totalInterventions / limit) // Calcul du nombre total de pages
        };

    } catch (error) {
        console.error("Erreur dans getInterventionsTerminees:", error);
        return { success: false, message: "Erreur serveur : " + error.message };
    }
};


module.exports = { fetchHistoriqueIntervention , updateInterventionMecanicien , planifierIntervention , getMecaniciensDisponibles , getPlanningJour , updateInterventionStatus , addPieceToIntervention , getEmploiDuTemps , getTaskIntervention , getInterventionsTerminees };
